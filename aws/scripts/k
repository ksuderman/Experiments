#!/usr/bin/env bash

KUBE=$HOME/.kube
CONFIG=$KUBE/config

# Change this if you would like to store the kubeconfig files in a 
# different location.
CONFIGS=$KUBE/configs

# Get the base script name for the help messages.
NAME=$(basename $0)

# ANSI color codes for the help messages
reset="\033[0m"
bold="\033[1m"
ital="\033[3m" # does not work on OS X

# Function used to highlight text.
function hi() {
    echo -e "$bold$@$reset"
}

function usage() {
	cat | less -R << EOF	
    $(hi SYNOPSIS)
        Wrapper for $(hi kubectl) that manages the kubeconfig files.
		
    $(hi USAGE) 
        $NAME [ls|cat|rm|clear|install|paste|local|global] <kubeconfig>	
        $NAME [kubectl commands]
        
    $(hi COMMANDS)
        $(hi ls)|$(hi list)
           List available contexts
        $(hi cat) <kubeconfig>
            Display the contents of the kubeconfig file
        $(hi rm) <kubeconfig>
            Deletes the kubeconfig file
        $(hi install) <name> /path/to/kube/config
            Copies the kubeconfig to $CONFIGS/<name>
        $(hi paste) <name>
            Pastes the contents of the clipboard to $CONFIGS/<name>. (MacOS only)
        $(hi local) <name>
            Creates the .ktx symlink in the current directory that points to 
            $CONFIGS/<name>.  When running $(hi kubectl) via the $(hi k) command (recommended)
            the local .ktx kubeconfig will be used.
        $(hi global) <kubeconfig>
            Sets the global kubeconfig by symlinking ~/.kube/config 
            to $CONFIGS/<kubeconfig>
        $(hi clear)
            Removes the ~/.kube/config symlink
        $(hi login) <namespace> <container ID>
            Uses $(hi kubectl exec) to open a Bash shell in the given pod/container.
        $(hi help)
            Prints this help message.
        	
        Commands that are not one of the above will be passed directly to
        the $(hi kubectl) command.
            	
    $(hi EXAMPLES)
    	\$> $NAME ls
    	\$> $NAME install rke /etc/rancher/rke2/rke2.yml
    	\$> $NAME cat rke
    	\$> $NAME local rke
    	\$> $NAME get nodes
EOF
}

if [[ -z $1 ]] ; then
	usage 
	exit
fi

function k8s() {
	if [[ -L .ktx ]] ; then
		# https://github.com/kubernetes/kubectl/issues/727
		#KFG="--kubeconfig=$(readlink .ktx)"
		KUBECONFIG=$(readlink .ktx) kubectl $@
		exit
	fi
	#kubectl $KFG $@
	kubectl $@
}

function _helm() {
	if [[ -L .ktx ]] ; then
		KUBECONFIG=$(readlink .ktx) helm $@
		exit
	fi
	helm $@
}

case $1 in
	ls|list)
		echo "Available contexts"
		ls -l $CONFIGS
		echo
		if [[ -e $CONFIG ]] ; then
			ECHO=echo
			echo "Global context: $(readlink $CONFIG)"
		fi
		if [[ -L .ktx ]] ; then
			ECHO=echo
			echo "Local context: $(readlink .ktx)"
		fi
		$ECHO
		;;
	cat)
		if [[ -z $2 ]] ; then
			echo "USAGE: $NAME cat <context>"
			exit 1
		fi
		if [[ -e $CONFIGS/$2 ]]; then
			cat $CONFIGS/$2
		else
			echo "No such configuration $CONFIGS/$2"
			exit 1
		fi			
		;;
	rm)
		if [[ -z $2 ]] ; then
			echo "USAGE: $NAME rm <context>"
			exit 1
		fi
		while [[ -n $2 ]] ; do
			if [[ -e $CONFIGS/$2 ]]; then
				rm $CONFIGS/$2
				echo "Removed context $CONFIGS/$2"
			else
				echo "No such configuration $CONFIGS/$2"
				exit 1
			fi
			shift
		done			
		;;
	global)
		if [[ -z $2 ]] ; then
			echo "USAGE: $NAME global <context>"
			exit 1
		fi
		if [[ -e $CONFIGS/$2 ]]; then
			if [[ -e $CONFIG ]] ; then
				rm $CONFIG
			fi
			ln -s $CONFIGS/$2 $CONFIG
			chmod 600 $CONFIG
			echo "Global context set to $CONFIGS/$2"
		else
			echo "No such configuration $CONFIGS/$2"
			exit 1
		fi	
		;;	
	helm)
		if [[ -z $2 ]] ; then
			echo "USAGE: $NAME $1 [helm command] ..."
			exit
		fi
		shift
		_helm $@
		;;
	clear)
		if [[ ! -e $CONFIG ]] ; then
			echo "No $CONFIG file found"
			#ls -alh $CONFIG
			#ls -alh $KUBE
			#ls -alh $HOME/.kube
			exit 1
		fi	
		if [[ ! -L $CONFIG ]] ; then
			echo "$CONFIG is not a symlink, not removing"
			exit 1
		fi
		rm $CONFIG
		echo "Removed $CONFIG"
		;;
	paste)
		if [[ $(uname -s) != 'Darwin' ]] ; then
			echo "This functionality is only available on MacOS"
			exit 1
		fi
		if [[ -z $2 ]] ; then
			echo "ERROR: Invalid parameters"
			echo "USAGE: $NAME paste <kubeconfig>"
			exit 1
		fi
		if [[ -e $CONFIGS/$2 ]] ; then
			echo "ERROR: A kubeconfig with that name already exists."
			echo "Run: '$NAME rm $2' before install another kubeconfig with the same name.'"
			exit 1
		fi
		pbpaste > $CONFIGS/$2
		echo "Installed $CONFIGS/$2"		
		;;
	install)
		if [[ -z $2 ]] ; then
			echo "ERROR: Invalid parameters"
			echo "USAGE: $NAME $1 <name> /path/to/kube/config"
			exit 1
		fi
		if [[ -z $3 ]] ; then
			if [[ ! -e $CONFIG ]] ; then
				echo "No kubeconfig provided and $CONFIG does not exist"
				exit 1
			fi
			if [[ -L $CONFIG ]] ; then
				echo "ERROR: $CONFIG is already a symbolic link. Refusing to install."
				exit 1
			fi
			if [[ -e $CONFIGS/$2 ]] ; then
				echo "ERROR: There is already a local config named $2. Refusing to install"
				exit 1
			fi
			mv $CONFIG $CONFIGS/$2
			echo "Renamed $CONFIG to $CONFIGS/$2"
			exit 0
		fi
		if [[ ! -e $3 ]] ; then
			echo "The kubeconfig file was not found."
			exit 1
		fi
		if [[ -e $CONFIGS/$2 ]] ; then
			echo "ERROR: A kube config with that name already exists."
			echo "Please run '$NAME rm $2' before installing this config."
			exit
		fi
		cp $3 $CONFIGS/$2
		echo "Installed $3 as $2"
		;;
	local)
		if [[ $2 = -f || $2 = --force ]] ; then
			shift
			DELETE=yes
		fi
		if [[ -z $2 ]] ; then
			echo "ERROR: Invalid parameters"
			echo "USAGE: $NAME local [-f|--force] <name>"
			exit 1
		fi
		if [[ ! -e $CONFIGS/$2 ]] ; then
			echo "ERROR: No such configuration: $2"
			exit 1
		fi
		if [[ -L .ktx ]] ; then
			if [[ $DELETE = yes ]] ; then
				rm .ktx
			else
				echo "There is already a local context defined.  Use the --force argument to replace it."
				exit 1
			fi
		fi
		ln -s $CONFIGS/$2 .ktx
		echo "Created local context for $CONFIGS/$2"
		;;
	events)
		if [[ -n $2 ]] ; then
			NS="-n $2"
		fi
		k8s get events $NS
		;;
	log)
		if [[ -z $2 || -z $3 ]] ; then
			echo "ERROR: Invalid parameters"
			echo "USAGE: $NAME log <namespace> <pod>"
			echo "       $NAME log galaxy web"
			exit 1
		fi
		NS=$2
		POD=$(k8s get pods -n $NS | grep ".*-"$3"-.*" | cut -d\  -f1) 
		if [[ -z $POD ]] ; then
			echo "ERROR: No such pod $3"
			exit 1
		fi
		shift 3
		k8s logs $POD -n $NS $@
		;;
	login)
		if [[ -z $2 || -z $3 ]] ; then
			echo "ERROR: Invalid parameters. No pod ID was provided."
			echo "USAGE: $NAME $1 <namespace> <pod-id>"
			echo "       $NAME $1 galaxy galaxy-job-0-5d4f747457-szgxw"
			exit
		fi
		k8s exec -itn $2 $3 -- bash
		;;
	help)
		usage 
		;;
	*)
		k8s $@
		#echo "Unrecognized command '$1'. Run '$NAME help' for usage assistance."
		;;
esac
