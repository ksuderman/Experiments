set -e

reset="\033[0m"
bold="\033[1m"
ital="\033[3m" # does not work on OS X

DIR=~/.cluster
NAME=$(basename $0)

# Function used to highlight text.
function hi() {
    echo -e "$bold$@$reset"
}

function usage() {
	cat | less -R << EOF 
	
$(hi SYNOPSIS) 
    Login to experiment cluster nodes
		
$(hi USAGE) 
    $NAME [login|open|ip|ls|rm|save|upload|download|help] 
	
$(hi COMMANDS)
    $(hi login) <name>
        Establish an SSH connection to the named host.
    $(hi open) <name> /relative/url
        Opens the relative url on the named server in the default web browser.
        Mac OS only.
    $(hi save) <name> <ip> <key>
    	Saves the connection information for the node.  
    	$(hi NOTE): The <key> should not include the ~/.ssh directory or .pem extension.
    $(hi parse) <inventory> <name>
        Parses an Ansible inventory file to collect the connection information
        for the nodes defined in the inventory.
    $(hi forget) <name>
    	Removes the IP for <name> from the known_hosts_file using $(hi ssh-keygen -R).
    $(hi ip) <name>
        Prints the IP address of the node. 
    $(hi ls)
        List defined nodes 
    [$(hi upload)|$(hi up)] <name> <source> <dest>
        Uploads the <source> file to the <dest> on the <name> node. Only single files
        can be uploaded.
    [$(hi download)|$(hi down)|$(hi get)] <name> <source> <dest>
        Downloads the <source> file from <name> node and saves to <dest>. Only single
        files can be downloaded.
    $(hi rm) <name> [<name>...]
    	Removed the node definitions from $DIR directory
    $(hi help)
        Prints this help message.

$(hi EXAMPLES)
    $(hi \$\>) $NAME save exp1 129.114.17.166 my-key
    $(hi \$\>) $NAME login exp1
    $(hi \$\>) $NAME upload exp1 data.tsv /data
    
EOF
}

if [[ $# = 0 ]] ; then
	usage
	exit
fi

function save() {
	cat > $DIR/$1 << EOF
ip=$2
key=$3
EOF
	echo "Saved IP and key for $1"
}

function parse() {
	local name=$2
	#local key=$3
	local key=$(cat $1 | grep private_key_file | cut -d= -f2)
	while read -r line ; do
		ID=$(echo $line | cut -f1 -d\  | rev | cut -f1 -d-)
		IP=$(echo $line | cut -f2 -d=)
		local file_name=~/.cluster/$2$ID
		if [[ -e $file_name ]] ; then
			if [[ $FORCE = yes ]] ; then
				rm $file_name
			else
				echo "The file $file_name already exists. Skipping."
				return
			fi
		fi
		echo "ip=$IP" > $file_name
		echo "key=$key" >> $file_name
		echo "Wrote $file_name"
	done <<< $(cat $1 | grep ssh_host)
}

case $1 in
	login)
		if [[ -z $2 ]] ; then
			echo "ERROR: No ip or hostname specified."
			exit 1
		fi
		if [ ! -e $DIR/$2 ] ; then
			echo "No login information available for $2"
			exit 1
		fi
		source $DIR/$2
		echo "Logging in to $ip"
		shift 2
		username=${username:-ubuntu}
		ssh -i $key $username@$ip $@
		;;
	save)
		if [[ $# != 4 ]] ; then
			echo "ERROR: Invalid parameters."
			echo "USAGE: $NAME $1 <shortcut> <ip> <key>"
			echo "Specify just the key name without the .pem extension or with"
			echo "the directory path."
			echo "EXAMPLE: $NAME $1 askme 1.2.3.4 askme"
			exit 1
		fi
		save $2 $3 ~/.ssh/$4.pem		
		;;
	forget|reset)
		if [[ -z $2 ]] ; then
			echo "ERROR: Invalid parameters."
			echo "USAGE: $NAME $1 <name>"
			exit 1
		fi
		shift
		while [[ -n $1 ]] ; do
    		if [[ ! -e $DIR/$1 ]] ; then
	    		echo "ERROR: No such node named $1"
		    	#exit 1
    		else
    	    	source $DIR/$1
	    	    ssh-keygen -R $ip
    	    	echo "Removed $ip from the known_hosts file."
    	    fi
    		shift
    	done
		;;
	ls) $@ $DIR ;;
	open)
	    echo "$2 $3"
	    source $DIR/$2
	    cat $DIR/$2
	    open http://$ip/$3
	    ;;
	upload|up|cp)
		if [[ -z $2 ]] ; then
			echo "ERROR: Invalid parameters"
			echo "USAGE: $NAME $1 NAME SRC DEST"
			echo "EX   : $NAME $1 cm1 /tmp/data.txt /home/ubuntu/"
			exit 1
		fi
		source $DIR/$2
		username=${username:-ubuntu}
		scp -i $key $3 $username@$ip:$4
		;;
	download|down|dl|get)
		if [[ -z $2 ]] ; then
			echo "ERROR: Invalid parameters"
			echo "USAGE: $NAME $1 NAME SRC DEST"
			echo "EX   : $NAME $1 cm1 /tmp/data.txt /home/ubuntu/"
			exit 1
		fi
		source $DIR/$2
		username=${username:-ubuntu}
		scp -i $key $username@$ip:$3 $4
		;;
	exec)
		if [[ -z $2 ]] ; then
			echo "ERROR: Invalid parameters"
			echo "USAGE: $NAME $1 NAME COMMAND"
			echo "EX   : $NAME $1 aws 'mkdir /home/ubuntu/.kube'"
			exit 1
		fi
		source $DIR/$2
		shift 2
		ssh -i $key ubuntu@$ip "$@"
		;;
	parse)
		if [[ $2 = -f || $2 = --force ]] ; then
			FORCE=yes
			shift
		fi
		if [[ -z $3 ]] ; then
			echo "ERROR: Invalid parameters"
			echo "USAGE: $NAME $2 <inventory> <name>"
			exit 1
		fi
		parse $2 $3 
		;;
	rm)
		if [[ -z $2 ]] ; then
			echo "ERROR: Invalid parameters"
			echo "USAGE: $NAME $1 <name> [<name>...]"
			exit 1
		fi
		while [[ -n $2 ]] ; do
			if [[ -e $DIR/$2 ]] ; then
				rm $DIR/$2
				echo "Removed $2"
			else
				echo "No such node: $2"
			fi
			shift
		done
		;;
	ip)
		if [[ -z $2 ]] ; then
			echo "ERROR: a node name was not provided"
			echo "USAGE: $NAME $1 <name>"
			echo "EG   : $NAME $1 rook1"
			echo
			exit 1
		fi
		if [ ! -e $DIR/$2 ] ; then
			echo "No node with the name $2 is available."
			exit 1
		fi
		source $DIR/$2
		echo $ip
		;;
	user|username)
		if [[ -z $2 ]] ; then
			echo "ERROR: a node name was not provided"
			echo "USAGE: $NAME $1 <name>"
			echo "EG   : $NAME $1 rook1"
			echo
			exit 1
		fi
		if [ ! -e $DIR/$2 ] ; then
			echo "No node with the name $2 is available."
			exit 1
		fi
		source $DIR/$2
		username=${username:-ubuntu}
		echo $username
		;;

	help)
		usage
		;;
	*)
		echo "ERROR: Invalid command $1"
		usage
		;;
esac
		
exit

## Old code
		case $2 in
			galaxy) 
				ip='129.114.17.171' 
				KEY=$TACC_KEY
				;;
			c1) ip='149.165.172.77' ;; 
			c2) ip='149.165.168.196' ;; 
			c3) ip='149.165.171.46' ;; 
			ebs|ebs1)
				ip='129.114.16.172'
				KEY=$TACC_KEY
				;;
			ebs2)
				ip='129.114.16.137'
				KEY=$TACC_KEY
				;;
			ebs3)
				ip='129.114.16.247'
				KEY=$TACC_KEY
				;;
			*) ip=$2 ;;
		esac

